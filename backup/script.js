const scoreElement = document.querySelector('.score')
const healthElement = document.querySelector('.health')
const resultDisplay = document.querySelector('.score')
const gameArea = document.querySelector('.gameArea') //html elem.
const width = 15; //area 15x15 = 255
const aliensRemoved = [];
let currentShooterIndex = 202; //spwan position player
let invadersID
let isGoingRight = true //boarder check, if invaders can go to left
let direction = 1 //moving invaders direction
let results = 0

//TODO all variables should be here on top


//create game area, w*w=255, one div for each square------------------------
for (let i = 0; i < width * width; i++) { //do it 255 times
    
   const square = document.createElement("div")
   gameArea.appendChild(square) //div becomes child of gameArea element
    square.id = i; //not used, maybe for special type enemy
    square.textContent = ""+i+""; //for testing
    square.style.fontSize = "10px";
}
//---done---------------------------------------------------------------------


//each square ingame is now in array "squares"
const squares = Array.from(document.querySelectorAll(".gameArea div")) 
console.log(squares); //(255) [div#0, div#1]
//Array.from() put all 255 divs into array called squares
//".gameArea div" ==>all divs inside element with class .gamearea
//---done---------------------------------------------------------------------


//giving invaders an id, they spawn on the corresponding square
// TODO: THIS should be generated by function, to make different levels#####################################################################

let alienInvaders = [1,2,3,34,];
const protectionWall = []; //not used, //TODO with each level less#########
// squares[10].classList.add('invader'); //add one
//---done---------------------------------------------------------------------

//DRAW ENEMIES only if they not dead
function draw() {
    for (let i = 0; i < alienInvaders.length; i++) {
        if(!aliensRemoved.includes(i)) {  
            squares[alienInvaders[i]].classList.add("invader")
        }        
    }
}
draw();
//---done---------------------------------------------------------------------


//spawn shooter
squares[currentShooterIndex].classList.add('shooter')



//player movement
function moveShooter(e) {
    squares[currentShooterIndex].classList.remove('shooter')
    switch(e.key) {
        case "ArrowLeft":  
            //all left: 0,15,30,45,60, ...195, 210
            //max left: 195/15= % is 0 don't pass if statement
            if(currentShooterIndex % width !==0) { //dont  
                currentShooterIndex -=1
            }break;

        case "ArrowRight":         
            if(currentShooterIndex % width < width -1) {
                currentShooterIndex +=1
            }break;
    }
    squares[currentShooterIndex].classList.add('shooter')
}

document.addEventListener('keydown', moveShooter)
//---done---------------------------------------------------------------------

//INVADER MOVEMENT
//loop through invader array and delete all their class .invader
function remove(){
    for (let index = 0; index < alienInvaders.length; index++) {  
        squares[alienInvaders[index]].classList.remove('invader') 
    }
}

function moveInvaders() {
    //define boundaries of gameArea //TODO this and player movement, DRY??
    const leftEdge = alienInvaders[0] % width === 0
    const rightEdge = alienInvaders[alienInvaders.length-1] % width === width - 1;
    remove();

//movement & collision logic border left and right
    if(rightEdge && isGoingRight) {
        for (let i = 0; i < alienInvaders.length; i++) {
            alienInvaders[i] += width +1;
            direction = -1
            isGoingRight = false; 
        }
    }
    if(leftEdge &&! isGoingRight) {
        for (let i = 0; i < alienInvaders.length; i++) {
            alienInvaders[i] += width -1;
            direction = 1
            isGoingRight = true;          
        }
    }
    for (let index = 0; index < alienInvaders.length; index++) {
        alienInvaders[index] += direction //on which field enemy moves
    }
    draw();
    
//win lose detection, lose: player has class invader, win enemy=[]
    if(squares[currentShooterIndex].classList.contains("invader")) {
        resultDisplay.innerHTML = "GAME OVER!"
        clearInterval(invadersID)
    }

    if(aliensRemoved.length === alienInvaders.length) {
        resultDisplay.innerHTML = "GAME WON!"
        clearInterval(invadersID)
    }
}
//---done---------------------------------------------------------------------


invadersID = setInterval(moveInvaders, 1000)

//SHOOTING
function shoot(e) {
    let laserId 
    let currentLaserIndex = currentShooterIndex //whereever player is start there

    function moveLaser() {
        squares[currentLaserIndex].classList.remove("laser");
        currentLaserIndex -= width; //-15 always one above square


    
        if (squares[currentLaserIndex].classList.contains("invader")) {
            squares[currentLaserIndex].classList.remove("laser")
            squares[currentLaserIndex].classList.remove("invader")
            squares[currentLaserIndex].classList.add("boom")
            
            setTimeout(() => squares[currentLaserIndex].classList.remove("boom"), 300  )
            clearInterval(laserId)
            
            const alienRemoved = alienInvaders.indexOf(currentLaserIndex)
            aliensRemoved.push(alienRemoved)
            results++
            resultDisplay.innerHTML = results
            
        }
        
        squares[currentLaserIndex].classList.add("laser");

        
        
        // if (currentLaserIndex < 0) {
            //     clearInterval(laserId);
            //     return;
            // }
            
        }
        
        if (e.key=== "ArrowUp") {
            laserId = setInterval(moveLaser, 60)
        }
        
}

document.addEventListener("keydown", shoot)

